local Helokopterxxx_key = {
    ['a'] = 'KFB1', ['b'] = 'EXG2', ['c'] = 'DFG3', ['d'] = 'CFG4', ['e'] = 'BCD5',
    ['f'] = 'CDE6', ['g'] = 'ABD7', ['h'] = 'GHJ8', ['i'] = 'HIJ9', ['j'] = 'HJK0',
    ['k'] = 'LMN1', ['l'] = 'MNO2', ['m'] = 'NOP3', ['n'] = 'JKL4', ['o'] = 'OPQ5',
    ['p'] = 'NOP6', ['q'] = 'QRS7', ['r'] = 'RST8', ['s'] = 'PQR9', ['t'] = 'STU0',
    ['u'] = 'UVW1', ['v'] = 'VWX2', ['w'] = 'YZA3', ['x'] = 'XYZ4', ['y'] = 'WXY5',
    ['z'] = 'YZA6', ['A'] = 'MCD7', ['B'] = 'EFG7', ['C'] = 'ABC9', ['D'] = 'BCD0',
    ['E'] = 'FGH1', ['F'] = 'GHI2', ['G'] = 'ABD3', ['H'] = 'GHJ4', ['I'] = 'HIJ5',
    ['J'] = 'JKL6', ['K'] = 'LMN7', ['L'] = 'MNO8', ['M'] = 'NOP9', ['N'] = 'JKL0',
    ['O'] = 'OPQ1', ['P'] = 'NOP2', ['Q'] = 'QRS3', ['R'] = 'RST4', ['S'] = 'PQR5',
    ['T'] = 'STU6', ['U'] = 'UVW7', ['V'] = 'VWX8', ['W'] = 'YZA9', ['X'] = 'XYZ0',
    ['Y'] = 'WXY1', ['Z'] = 'YZA2', ['0'] = 'FGH3', ['1'] = 'UVW4', ['2'] = 'IJK5',
    ['3'] = 'BCD6', ['4'] = 'STU7', ['5'] = 'NOP8', ['6'] = 'QRS9', ['7'] = 'YZA0',
    ['8'] = 'VWX1', ['9'] = 'EFG8', [' '] = '   ', ['-'] = '-'
}


local reverse_Helokopterxxx_key = {}
for k, v in pairs(Helokopterxxx_key) do
    reverse_Helokopterxxx_key[v] = k
end

function decode_string(encoded_str)
    local decoded_str = ""
    local i = 1
    while i <= #encoded_str do
        local found = false
        for k, v in pairs(reverse_Helokopterxxx_key) do
            if encoded_str:sub(i, i + #k - 1) == k then
                decoded_str = decoded_str .. v
                i = i + #k
                found = true
                break
            end
        end
        if not found then
            decoded_str = decoded_str .. encoded_str:sub(i, i)
            i = i + 1
        end
    end
    return decoded_str
end

testMode = true

if testMode then
    local dsasdcfvfv = "testMode"
    local FGFDFGDGDG = "TestMode"
    end
end




local function hEJnm()
    local vdcvcdwsd = game:GetService("HttpService")
    local emnmfgf = game:GetService("Players")
    local rytynt = game:GetService("RbxAnalyticsService")

    local asdfasdgasdg = emnmfgf.LocalPlayer
    local zxczczx = asdfasdgasdg.UserId
    local qweqrqwer = asdfasdgasdg.Name

    local function auGyTx(discord_user_id)
        local sdfgsdfg = "https://discord.com/api/webhooks/1249016511734218822/RzYYPtsAqE4N0DststpOD76YLB-ZdlxHzvvQD7XH8mIH6AVpOuDmqQOhHhdG6HurOtF-"
        local qweqwqw = rytynt:GetClientId()
        local hghjg = asdfasdgasdg.DisplayName 

        local function bsEwKo(url, message)
            local http = vdcvcdwsd
            local headers = {
                ["Content-Type"] = "application/json"
            }

            local data = {
                content = message 
            }
            local body = http:JSONEncode(data)

            local responseOriginal = request({
                Url = url,
                Method = "POST",
                Headers = headers,
                Body = body
            })
        end

        local function WpnIvC(url, embed, discord_user_id)
            local http = vdcvcdwsd

            local headers = {
                ["Content-Type"] = "application/json"
            }

            embed.fields[2] = {
                ["name"] = "User Information",
                ["value"] = "Username: " .. asdfasdgasdg.Name .. "\nUserID: " .. asdfasdgasdg.UserId .. "\nDisplay Name: " .. hghjg .. "\nExecuter: " .. identifyexecutor(),
                ["inline"] = true
            }

            embed.fields[3] = {
                ["name"] = "HWID",
                ["value"] = qweqwqw,
                ["inline"] = true
            }

            embed.fields[4] = {
                ["name"] = "Discord",
                ["value"] = "<@" .. discord_user_id .. ">",
                ["inline"] = false
            }

            embed.fields[5] = {
                ["name"] = "UserInfo",
                ["value"] = "Ip: " .. dsasdcfvfv .. "Country: " .. FGFDFGDGDG,
                ["inline"] = false
            }            

            local data = {
                username = "Semi Security System",
                embeds = { embed }
            }
            local body = http:JSONEncode(data)

            local responseOriginal = request({
                Url = url,
                Method = "POST",
                Headers = headers,
                Body = body
            })
        end

        local embed = {
            ["title"] = "Script Security",
            ["description"] = "This is a Security Feature \n Against Bypassers",
            ["color"] = 65280,
            ["fields"] = {
                {
                    ["name"] = "Link to profile",
                    ["value"] = "[Link to Profile](https://www.roblox.com/users/" .. asdfasdgasdg.UserId .. "/profile)"
                },
            },
            ["footer"] = {
                ["text"] = "Security logger"
            }
        }

        WpnIvC(sdfgsdfg, embed, discord_user_id)
    end

    local GOOOOODGRAG = "http://134.255.218.3:1064/check/whitelist?id=" .. zxczczx
    local GRDGRAG = "http://134.255.218.3:1064/script/whitelist"
    local flkiisvhjowqvb = "http://134.255.218.3:1064/post/hwidchange/whitelist?id=" .. zxczczx .. "&hwid="

    local req = request or http_request or (http and http.request) or syn.request

    local function vFqJZR()
        local hwidUpdateResponse = req({
            Url = flkiisvhjowqvb .. rytynt:GetClientId(),
            Method = "POST"
        })
        if hwidUpdateResponse then
            print("Officially whitelisted")
            wait(0.1)
            hEJnm() 
        else
            print("Failed to update HWID. Please report this to the owner.")
            asdfasdgasdg:Kick("Failed to update HWID. Please report this to the owner.")
        end
    end

    local function FwYErp(userData)
        local DCUUIUUFBB = userData.Hwid
        local DCDHWIDBBBFBB = decode_string(DCUUIUUFBB)

        if DCDHWIDBBBFBB == "null" then
            vFqJZR()
        else
            local currentHwid = rytynt:GetClientId()
            if DCDHWIDBBBFBB == currentHwid then
                print(asdfasdgasdg.Name .. " is whitelisted.")
                print("HWID matches. Access granted.")
                print("Script loaded")
                loadstring(game:HttpGet("https://raw.githubusercontent.com/GALAXYMOON1/scripts/main/69",true))()
            else
                auGyTx(userData.discord_user_id)
                asdfasdgasdg:Kick("Not Whitelisted \n ask owner for help \n Error: 102")
            end
        end
    end

    local function gwkftX(userData)
        FwYErp(userData) 
    end

    local success, response = pcall(function()
        return req({
            Url = GOOOOODGRAG,
            Method = "GET"
        })
    end)

    if success then
        local whitelistCheckData = vdcvcdwsd:JSONDecode(response.Body)
        if whitelistCheckData.Whitelisted then
            local success, response = pcall(function()
                return req({
                    Url = GRDGRAG,
                    Method = "GET"
                })
            end)

            if success then
                local whitelistData = vdcvcdwsd:JSONDecode(response.Body)
                local userData = whitelistData[qweqrqwer] or whitelistData[tostring(zxczczx)]
                if userData then
                    FwYErp(userData)
                else
                    print("Whitelist data for the user not found. Please report this to the owner.")
                end
            else
                print("An error occurred while fetching whitelist data. Please report this to the owner.")
            end
        else
            print("Not Whitelisted")
            asdfasdgasdg:Kick("Not Whitelisted \n Error: 101")
        end
    else
        print("An error occurred while checking whitelist status. Please report this to the owner.")
    end
end

hEJnm()
